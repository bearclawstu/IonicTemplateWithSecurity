service: securityTemplate

package:
  individually: true

custom:
  stage: ${opt:stage, self:provider.stage}
  serviceName: ${self:service}-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: dev
  environment:
    TABLE_NAME: ${self:custom.serviceName}
    REGION: ${self:provider.region}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - DynamoTable
          - Arn
functions:
  PostConfirmation:
    handler: functions/cognitoUserPostConfirmation.handler
    package:
      include:
        - functions/cognitoUserPostConfirmation.js
      exclude:
        - functions/**
        - templates/**
    events:
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation
resources:
  Resources:
    SharedGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.serviceName}-Gateway
    ProfileBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    CognitoUserPoolMyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.serviceName}
        AutoVerifiedAttributes:
          - email
        AliasAttributes:
          - email
          - preferred_username
        UsernameConfiguration:
          CaseSensitive: False
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.serviceName}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: securityTemplateGatewayApiGatewayAuthorizer
        RestApiId:
          Ref: SharedGateway
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":userpool/", Ref: CognitoUserPoolMyUserPool]]}
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:custom.serviceName}-IdentityPool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: false
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPoolMyUserPool", "ProviderName" ]
    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'

                # Allow users to invoke our API
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:execute-api:'
                        - Ref: AWS::Region
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: SharedGateway
                        - '/*'
                # Allow users to upload attachments to their
                # folder inside our S3 bucket
                - Effect: 'Allow'
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                  Resource:
                    - Fn::Join:
                        - ''
                        - - Fn::GetAtt: [ProfileBucket, Arn]
                          - '/*'
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: inverseGSI
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: SharedGateway
      Export:
        Name: ${self:custom.serviceName}:sharedGateway-restApiId
    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - SharedGateway
          - RootResourceId
      Export:
        Name: ${self:custom.serviceName}:sharedGateway-rootResourceId
    UserPoolId:
      Value:
        Ref: CognitoUserPoolMyUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    CognitoAuthorizer:
      Value:
        Ref: CognitoAuthorizer
      Export:
        Name: ${self:custom.serviceName}:cognito-authorizer
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
    DynamoDbTable:
      Value:
        Ref: DynamoTable
      Export:
        Name: ${self:custom.serviceName}:DynamoDbTable
    DynamoDbTableArn:
      Description: The ARN for the DynamoDB Table
      Value:
        'Fn::GetAtt': [DynamoTable, Arn]
      Export:
        Name: ${self:custom.serviceName}:TableArn
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: SharedGateway
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"
    ProfileBucketName:
      Value:
        Ref: ProfileBucket
